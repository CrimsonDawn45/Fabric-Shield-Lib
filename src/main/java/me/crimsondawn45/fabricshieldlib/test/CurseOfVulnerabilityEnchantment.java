package me.crimsondawn45.fabricshieldlib.test;

import java.util.List;

import me.crimsondawn45.fabricshieldlib.mixin.LivingEntityAccessor;
import me.crimsondawn45.fabricshieldlib.object.FabricShieldEnchantment;
import net.minecraft.enchantment.EnchantmentTarget;
import net.minecraft.entity.EquipmentSlot;
import net.minecraft.entity.LivingEntity;
import net.minecraft.entity.damage.DamageSource;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.sound.SoundEvents;
import net.minecraft.util.Hand;

public class CurseOfVulnerabilityEnchantment extends FabricShieldEnchantment
{

	public CurseOfVulnerabilityEnchantment(Rarity weight, EnchantmentTarget type, List<Item> acceptedItems)
	{
		super(weight, type, acceptedItems);
	}
	
	@Override
	public void onBlockDamage(LivingEntity defender, DamageSource source, Hand hand, ItemStack shield, float amount, int enchantmentLevel)
	{
		if(defender instanceof PlayerEntity)
		{
			PlayerEntity player = (PlayerEntity) defender;
			
			shield.damage((int)Math.round(amount * 1.5F), player, (playerEntity) -> {playerEntity.sendToolBreakStatus(hand);});
			
			if(shield.isEmpty())
			{
				if(hand == Hand.MAIN_HAND)
				{
					player.equipStack(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
				}
				else
				{
					player.equipStack(EquipmentSlot.OFFHAND, ItemStack.EMPTY);
				}
				
				((LivingEntityAccessor)player).setActiveItemStack(ItemStack.EMPTY);
				player.playSound(SoundEvents.ITEM_SHIELD_BREAK, 0.8F, 0.8F + player.world.random.nextFloat() * 0.4F);
			}
		}
	}
	
	@Override
	public int getMaximumLevel()
	{
		return 1;
	}
	
	@Override
	public boolean isCursed()
	{
		return true;
	}
	
	@Override
	public boolean isTreasure()
	{
		return true;
	}
}
